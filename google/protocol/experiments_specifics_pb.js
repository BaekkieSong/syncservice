/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sync_pb.AutofillCullingFlags', null, global);
goog.exportSymbol('proto.sync_pb.EnhancedBookmarksFlags', null, global);
goog.exportSymbol('proto.sync_pb.ExperimentsSpecifics', null, global);
goog.exportSymbol('proto.sync_pb.FaviconSyncFlags', null, global);
goog.exportSymbol('proto.sync_pb.GcmChannelFlags', null, global);
goog.exportSymbol('proto.sync_pb.GcmInvalidationsFlags', null, global);
goog.exportSymbol('proto.sync_pb.HistoryDeleteDirectives', null, global);
goog.exportSymbol('proto.sync_pb.KeystoreEncryptionFlags', null, global);
goog.exportSymbol('proto.sync_pb.PreCommitUpdateAvoidanceFlags', null, global);
goog.exportSymbol('proto.sync_pb.WalletSyncFlags', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.KeystoreEncryptionFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.KeystoreEncryptionFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.KeystoreEncryptionFlags.displayName = 'proto.sync_pb.KeystoreEncryptionFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.HistoryDeleteDirectives = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.HistoryDeleteDirectives, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.HistoryDeleteDirectives.displayName = 'proto.sync_pb.HistoryDeleteDirectives';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.AutofillCullingFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.AutofillCullingFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.AutofillCullingFlags.displayName = 'proto.sync_pb.AutofillCullingFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.FaviconSyncFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.FaviconSyncFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.FaviconSyncFlags.displayName = 'proto.sync_pb.FaviconSyncFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.PreCommitUpdateAvoidanceFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.PreCommitUpdateAvoidanceFlags.displayName = 'proto.sync_pb.PreCommitUpdateAvoidanceFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.GcmChannelFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.GcmChannelFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.GcmChannelFlags.displayName = 'proto.sync_pb.GcmChannelFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.EnhancedBookmarksFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.EnhancedBookmarksFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.EnhancedBookmarksFlags.displayName = 'proto.sync_pb.EnhancedBookmarksFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.GcmInvalidationsFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.GcmInvalidationsFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.GcmInvalidationsFlags.displayName = 'proto.sync_pb.GcmInvalidationsFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.WalletSyncFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.WalletSyncFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.WalletSyncFlags.displayName = 'proto.sync_pb.WalletSyncFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.ExperimentsSpecifics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.ExperimentsSpecifics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.ExperimentsSpecifics.displayName = 'proto.sync_pb.ExperimentsSpecifics';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.KeystoreEncryptionFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.KeystoreEncryptionFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.KeystoreEncryptionFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.KeystoreEncryptionFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.KeystoreEncryptionFlags}
 */
proto.sync_pb.KeystoreEncryptionFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.KeystoreEncryptionFlags;
  return proto.sync_pb.KeystoreEncryptionFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.KeystoreEncryptionFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.KeystoreEncryptionFlags}
 */
proto.sync_pb.KeystoreEncryptionFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.KeystoreEncryptionFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.KeystoreEncryptionFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.KeystoreEncryptionFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.KeystoreEncryptionFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.KeystoreEncryptionFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.KeystoreEncryptionFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.KeystoreEncryptionFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.KeystoreEncryptionFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.HistoryDeleteDirectives.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.HistoryDeleteDirectives.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.HistoryDeleteDirectives} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.HistoryDeleteDirectives.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.HistoryDeleteDirectives}
 */
proto.sync_pb.HistoryDeleteDirectives.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.HistoryDeleteDirectives;
  return proto.sync_pb.HistoryDeleteDirectives.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.HistoryDeleteDirectives} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.HistoryDeleteDirectives}
 */
proto.sync_pb.HistoryDeleteDirectives.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.HistoryDeleteDirectives.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.HistoryDeleteDirectives.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.HistoryDeleteDirectives} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.HistoryDeleteDirectives.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.HistoryDeleteDirectives.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.HistoryDeleteDirectives.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.HistoryDeleteDirectives.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.HistoryDeleteDirectives.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.AutofillCullingFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.AutofillCullingFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.AutofillCullingFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.AutofillCullingFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.AutofillCullingFlags}
 */
proto.sync_pb.AutofillCullingFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.AutofillCullingFlags;
  return proto.sync_pb.AutofillCullingFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.AutofillCullingFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.AutofillCullingFlags}
 */
proto.sync_pb.AutofillCullingFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.AutofillCullingFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.AutofillCullingFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.AutofillCullingFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.AutofillCullingFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.AutofillCullingFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.AutofillCullingFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.AutofillCullingFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.AutofillCullingFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.FaviconSyncFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.FaviconSyncFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.FaviconSyncFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.FaviconSyncFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1),
    faviconSyncLimit: jspb.Message.getFieldWithDefault(msg, 2, 200)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.FaviconSyncFlags}
 */
proto.sync_pb.FaviconSyncFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.FaviconSyncFlags;
  return proto.sync_pb.FaviconSyncFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.FaviconSyncFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.FaviconSyncFlags}
 */
proto.sync_pb.FaviconSyncFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFaviconSyncLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.FaviconSyncFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.FaviconSyncFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.FaviconSyncFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.FaviconSyncFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.FaviconSyncFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.FaviconSyncFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.FaviconSyncFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconSyncFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 favicon_sync_limit = 2;
 * @return {number}
 */
proto.sync_pb.FaviconSyncFlags.prototype.getFaviconSyncLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 200));
};


/** @param {number} value */
proto.sync_pb.FaviconSyncFlags.prototype.setFaviconSyncLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.FaviconSyncFlags.prototype.clearFaviconSyncLimit = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconSyncFlags.prototype.hasFaviconSyncLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.PreCommitUpdateAvoidanceFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.PreCommitUpdateAvoidanceFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.PreCommitUpdateAvoidanceFlags}
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.PreCommitUpdateAvoidanceFlags;
  return proto.sync_pb.PreCommitUpdateAvoidanceFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.PreCommitUpdateAvoidanceFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.PreCommitUpdateAvoidanceFlags}
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.PreCommitUpdateAvoidanceFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.PreCommitUpdateAvoidanceFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PreCommitUpdateAvoidanceFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.GcmChannelFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.GcmChannelFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.GcmChannelFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.GcmChannelFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.GcmChannelFlags}
 */
proto.sync_pb.GcmChannelFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.GcmChannelFlags;
  return proto.sync_pb.GcmChannelFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.GcmChannelFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.GcmChannelFlags}
 */
proto.sync_pb.GcmChannelFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.GcmChannelFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.GcmChannelFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.GcmChannelFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.GcmChannelFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.GcmChannelFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.GcmChannelFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.GcmChannelFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.GcmChannelFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.EnhancedBookmarksFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.EnhancedBookmarksFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.EnhancedBookmarksFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1),
    extensionId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.EnhancedBookmarksFlags}
 */
proto.sync_pb.EnhancedBookmarksFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.EnhancedBookmarksFlags;
  return proto.sync_pb.EnhancedBookmarksFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.EnhancedBookmarksFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.EnhancedBookmarksFlags}
 */
proto.sync_pb.EnhancedBookmarksFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtensionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.EnhancedBookmarksFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.EnhancedBookmarksFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.EnhancedBookmarksFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.EnhancedBookmarksFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string extension_id = 2;
 * @return {string}
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.getExtensionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sync_pb.EnhancedBookmarksFlags.prototype.setExtensionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.clearExtensionId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.EnhancedBookmarksFlags.prototype.hasExtensionId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.GcmInvalidationsFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.GcmInvalidationsFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.GcmInvalidationsFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.GcmInvalidationsFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.GcmInvalidationsFlags}
 */
proto.sync_pb.GcmInvalidationsFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.GcmInvalidationsFlags;
  return proto.sync_pb.GcmInvalidationsFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.GcmInvalidationsFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.GcmInvalidationsFlags}
 */
proto.sync_pb.GcmInvalidationsFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.GcmInvalidationsFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.GcmInvalidationsFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.GcmInvalidationsFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.GcmInvalidationsFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.GcmInvalidationsFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.GcmInvalidationsFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.GcmInvalidationsFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.GcmInvalidationsFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.WalletSyncFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.WalletSyncFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.WalletSyncFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.WalletSyncFlags.toObject = function(includeInstance, msg) {
  var obj = {
    enabled: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.WalletSyncFlags}
 */
proto.sync_pb.WalletSyncFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.WalletSyncFlags;
  return proto.sync_pb.WalletSyncFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.WalletSyncFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.WalletSyncFlags}
 */
proto.sync_pb.WalletSyncFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.WalletSyncFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.WalletSyncFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.WalletSyncFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.WalletSyncFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.WalletSyncFlags.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sync_pb.WalletSyncFlags.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.WalletSyncFlags.prototype.clearEnabled = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.WalletSyncFlags.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.ExperimentsSpecifics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.ExperimentsSpecifics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.ExperimentsSpecifics.toObject = function(includeInstance, msg) {
  var obj = {
    keystoreEncryption: (f = msg.getKeystoreEncryption()) && proto.sync_pb.KeystoreEncryptionFlags.toObject(includeInstance, f),
    historyDeleteDirectives: (f = msg.getHistoryDeleteDirectives()) && proto.sync_pb.HistoryDeleteDirectives.toObject(includeInstance, f),
    autofillCulling: (f = msg.getAutofillCulling()) && proto.sync_pb.AutofillCullingFlags.toObject(includeInstance, f),
    faviconSync: (f = msg.getFaviconSync()) && proto.sync_pb.FaviconSyncFlags.toObject(includeInstance, f),
    preCommitUpdateAvoidance: (f = msg.getPreCommitUpdateAvoidance()) && proto.sync_pb.PreCommitUpdateAvoidanceFlags.toObject(includeInstance, f),
    gcmChannel: (f = msg.getGcmChannel()) && proto.sync_pb.GcmChannelFlags.toObject(includeInstance, f),
    obsoleteEnhancedBookmarks: (f = msg.getObsoleteEnhancedBookmarks()) && proto.sync_pb.EnhancedBookmarksFlags.toObject(includeInstance, f),
    gcmInvalidations: (f = msg.getGcmInvalidations()) && proto.sync_pb.GcmInvalidationsFlags.toObject(includeInstance, f),
    obsoleteWalletSync: (f = msg.getObsoleteWalletSync()) && proto.sync_pb.WalletSyncFlags.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.ExperimentsSpecifics}
 */
proto.sync_pb.ExperimentsSpecifics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.ExperimentsSpecifics;
  return proto.sync_pb.ExperimentsSpecifics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.ExperimentsSpecifics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.ExperimentsSpecifics}
 */
proto.sync_pb.ExperimentsSpecifics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sync_pb.KeystoreEncryptionFlags;
      reader.readMessage(value,proto.sync_pb.KeystoreEncryptionFlags.deserializeBinaryFromReader);
      msg.setKeystoreEncryption(value);
      break;
    case 2:
      var value = new proto.sync_pb.HistoryDeleteDirectives;
      reader.readMessage(value,proto.sync_pb.HistoryDeleteDirectives.deserializeBinaryFromReader);
      msg.setHistoryDeleteDirectives(value);
      break;
    case 3:
      var value = new proto.sync_pb.AutofillCullingFlags;
      reader.readMessage(value,proto.sync_pb.AutofillCullingFlags.deserializeBinaryFromReader);
      msg.setAutofillCulling(value);
      break;
    case 4:
      var value = new proto.sync_pb.FaviconSyncFlags;
      reader.readMessage(value,proto.sync_pb.FaviconSyncFlags.deserializeBinaryFromReader);
      msg.setFaviconSync(value);
      break;
    case 5:
      var value = new proto.sync_pb.PreCommitUpdateAvoidanceFlags;
      reader.readMessage(value,proto.sync_pb.PreCommitUpdateAvoidanceFlags.deserializeBinaryFromReader);
      msg.setPreCommitUpdateAvoidance(value);
      break;
    case 6:
      var value = new proto.sync_pb.GcmChannelFlags;
      reader.readMessage(value,proto.sync_pb.GcmChannelFlags.deserializeBinaryFromReader);
      msg.setGcmChannel(value);
      break;
    case 7:
      var value = new proto.sync_pb.EnhancedBookmarksFlags;
      reader.readMessage(value,proto.sync_pb.EnhancedBookmarksFlags.deserializeBinaryFromReader);
      msg.setObsoleteEnhancedBookmarks(value);
      break;
    case 8:
      var value = new proto.sync_pb.GcmInvalidationsFlags;
      reader.readMessage(value,proto.sync_pb.GcmInvalidationsFlags.deserializeBinaryFromReader);
      msg.setGcmInvalidations(value);
      break;
    case 9:
      var value = new proto.sync_pb.WalletSyncFlags;
      reader.readMessage(value,proto.sync_pb.WalletSyncFlags.deserializeBinaryFromReader);
      msg.setObsoleteWalletSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.ExperimentsSpecifics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.ExperimentsSpecifics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.ExperimentsSpecifics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeystoreEncryption();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sync_pb.KeystoreEncryptionFlags.serializeBinaryToWriter
    );
  }
  f = message.getHistoryDeleteDirectives();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sync_pb.HistoryDeleteDirectives.serializeBinaryToWriter
    );
  }
  f = message.getAutofillCulling();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sync_pb.AutofillCullingFlags.serializeBinaryToWriter
    );
  }
  f = message.getFaviconSync();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sync_pb.FaviconSyncFlags.serializeBinaryToWriter
    );
  }
  f = message.getPreCommitUpdateAvoidance();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sync_pb.PreCommitUpdateAvoidanceFlags.serializeBinaryToWriter
    );
  }
  f = message.getGcmChannel();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sync_pb.GcmChannelFlags.serializeBinaryToWriter
    );
  }
  f = message.getObsoleteEnhancedBookmarks();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sync_pb.EnhancedBookmarksFlags.serializeBinaryToWriter
    );
  }
  f = message.getGcmInvalidations();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sync_pb.GcmInvalidationsFlags.serializeBinaryToWriter
    );
  }
  f = message.getObsoleteWalletSync();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.sync_pb.WalletSyncFlags.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeystoreEncryptionFlags keystore_encryption = 1;
 * @return {?proto.sync_pb.KeystoreEncryptionFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getKeystoreEncryption = function() {
  return /** @type{?proto.sync_pb.KeystoreEncryptionFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.KeystoreEncryptionFlags, 1));
};


/** @param {?proto.sync_pb.KeystoreEncryptionFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setKeystoreEncryption = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearKeystoreEncryption = function() {
  this.setKeystoreEncryption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasKeystoreEncryption = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HistoryDeleteDirectives history_delete_directives = 2;
 * @return {?proto.sync_pb.HistoryDeleteDirectives}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getHistoryDeleteDirectives = function() {
  return /** @type{?proto.sync_pb.HistoryDeleteDirectives} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.HistoryDeleteDirectives, 2));
};


/** @param {?proto.sync_pb.HistoryDeleteDirectives|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setHistoryDeleteDirectives = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearHistoryDeleteDirectives = function() {
  this.setHistoryDeleteDirectives(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasHistoryDeleteDirectives = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AutofillCullingFlags autofill_culling = 3;
 * @return {?proto.sync_pb.AutofillCullingFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getAutofillCulling = function() {
  return /** @type{?proto.sync_pb.AutofillCullingFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.AutofillCullingFlags, 3));
};


/** @param {?proto.sync_pb.AutofillCullingFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setAutofillCulling = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearAutofillCulling = function() {
  this.setAutofillCulling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasAutofillCulling = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FaviconSyncFlags favicon_sync = 4;
 * @return {?proto.sync_pb.FaviconSyncFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getFaviconSync = function() {
  return /** @type{?proto.sync_pb.FaviconSyncFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.FaviconSyncFlags, 4));
};


/** @param {?proto.sync_pb.FaviconSyncFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setFaviconSync = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearFaviconSync = function() {
  this.setFaviconSync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasFaviconSync = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
 * @return {?proto.sync_pb.PreCommitUpdateAvoidanceFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getPreCommitUpdateAvoidance = function() {
  return /** @type{?proto.sync_pb.PreCommitUpdateAvoidanceFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.PreCommitUpdateAvoidanceFlags, 5));
};


/** @param {?proto.sync_pb.PreCommitUpdateAvoidanceFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setPreCommitUpdateAvoidance = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearPreCommitUpdateAvoidance = function() {
  this.setPreCommitUpdateAvoidance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasPreCommitUpdateAvoidance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GcmChannelFlags gcm_channel = 6;
 * @return {?proto.sync_pb.GcmChannelFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getGcmChannel = function() {
  return /** @type{?proto.sync_pb.GcmChannelFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.GcmChannelFlags, 6));
};


/** @param {?proto.sync_pb.GcmChannelFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setGcmChannel = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearGcmChannel = function() {
  this.setGcmChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasGcmChannel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
 * @return {?proto.sync_pb.EnhancedBookmarksFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getObsoleteEnhancedBookmarks = function() {
  return /** @type{?proto.sync_pb.EnhancedBookmarksFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.EnhancedBookmarksFlags, 7));
};


/** @param {?proto.sync_pb.EnhancedBookmarksFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setObsoleteEnhancedBookmarks = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearObsoleteEnhancedBookmarks = function() {
  this.setObsoleteEnhancedBookmarks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasObsoleteEnhancedBookmarks = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional GcmInvalidationsFlags gcm_invalidations = 8;
 * @return {?proto.sync_pb.GcmInvalidationsFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getGcmInvalidations = function() {
  return /** @type{?proto.sync_pb.GcmInvalidationsFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.GcmInvalidationsFlags, 8));
};


/** @param {?proto.sync_pb.GcmInvalidationsFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setGcmInvalidations = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearGcmInvalidations = function() {
  this.setGcmInvalidations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasGcmInvalidations = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional WalletSyncFlags obsolete_wallet_sync = 9;
 * @return {?proto.sync_pb.WalletSyncFlags}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.getObsoleteWalletSync = function() {
  return /** @type{?proto.sync_pb.WalletSyncFlags} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.WalletSyncFlags, 9));
};


/** @param {?proto.sync_pb.WalletSyncFlags|undefined} value */
proto.sync_pb.ExperimentsSpecifics.prototype.setObsoleteWalletSync = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.ExperimentsSpecifics.prototype.clearObsoleteWalletSync = function() {
  this.setObsoleteWalletSync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.ExperimentsSpecifics.prototype.hasObsoleteWalletSync = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.sync_pb);
