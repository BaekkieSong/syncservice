/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sync_pb.UserConsentTypes', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.ConsentStatus', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.SyncConsent', null, global);
goog.exportSymbol('proto.sync_pb.UserConsentTypes.UnifiedConsent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.displayName = 'proto.sync_pb.UserConsentTypes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.repeatedFields_, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.displayName = 'proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.repeatedFields_, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.displayName = 'proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.repeatedFields_, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.displayName = 'proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.repeatedFields_, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.displayName = 'proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes.SyncConsent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sync_pb.UserConsentTypes.SyncConsent.repeatedFields_, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes.SyncConsent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.SyncConsent.displayName = 'proto.sync_pb.UserConsentTypes.SyncConsent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sync_pb.UserConsentTypes.UnifiedConsent.repeatedFields_, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes.UnifiedConsent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.UnifiedConsent.displayName = 'proto.sync_pb.UserConsentTypes.UnifiedConsent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.displayName = 'proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes}
 */
proto.sync_pb.UserConsentTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes;
  return proto.sync_pb.UserConsentTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes}
 */
proto.sync_pb.UserConsentTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.sync_pb.UserConsentTypes.ConsentStatus = {
  CONSENT_STATUS_UNSPECIFIED: 0,
  NOT_GIVEN: 1,
  GIVEN: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.toObject = function(includeInstance, msg) {
  var obj = {
    descriptionGrdIdsList: jspb.Message.getRepeatedField(msg, 1),
    confirmationGrdId: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent;
  return proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDescriptionGrdIds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmationGrdId(value);
      break;
    case 3:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescriptionGrdIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated int32 description_grd_ids = 1;
 * @return {!Array<number>}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.getDescriptionGrdIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.setDescriptionGrdIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.addDescriptionGrdIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.clearDescriptionGrdIdsList = function() {
  this.setDescriptionGrdIdsList([]);
};


/**
 * optional int32 confirmation_grd_id = 2;
 * @return {number}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.getConfirmationGrdId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.setConfirmationGrdId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.clearConfirmationGrdId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.hasConfirmationGrdId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConsentStatus status = 3;
 * @return {!proto.sync_pb.UserConsentTypes.ConsentStatus}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.getStatus = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.sync_pb.UserConsentTypes.ConsentStatus} value */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.toObject = function(includeInstance, msg) {
  var obj = {
    descriptionGrdIdsList: jspb.Message.getRepeatedField(msg, 1),
    confirmationGrdId: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent;
  return proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDescriptionGrdIds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmationGrdId(value);
      break;
    case 3:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescriptionGrdIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated int32 description_grd_ids = 1;
 * @return {!Array<number>}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.getDescriptionGrdIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.setDescriptionGrdIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.addDescriptionGrdIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.clearDescriptionGrdIdsList = function() {
  this.setDescriptionGrdIdsList([]);
};


/**
 * optional int32 confirmation_grd_id = 2;
 * @return {number}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.getConfirmationGrdId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.setConfirmationGrdId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.clearConfirmationGrdId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.hasConfirmationGrdId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConsentStatus status = 3;
 * @return {!proto.sync_pb.UserConsentTypes.ConsentStatus}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.getStatus = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.sync_pb.UserConsentTypes.ConsentStatus} value */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.toObject = function(includeInstance, msg) {
  var obj = {
    descriptionGrdIdsList: jspb.Message.getRepeatedField(msg, 1),
    confirmationGrdId: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent;
  return proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDescriptionGrdIds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmationGrdId(value);
      break;
    case 3:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescriptionGrdIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated int32 description_grd_ids = 1;
 * @return {!Array<number>}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.getDescriptionGrdIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.setDescriptionGrdIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.addDescriptionGrdIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.clearDescriptionGrdIdsList = function() {
  this.setDescriptionGrdIdsList([]);
};


/**
 * optional int32 confirmation_grd_id = 2;
 * @return {number}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.getConfirmationGrdId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.setConfirmationGrdId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.clearConfirmationGrdId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.hasConfirmationGrdId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConsentStatus status = 3;
 * @return {!proto.sync_pb.UserConsentTypes.ConsentStatus}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.getStatus = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.sync_pb.UserConsentTypes.ConsentStatus} value */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.toObject = function(includeInstance, msg) {
  var obj = {
    playTermsOfServiceTextLength: jspb.Message.getField(msg, 1),
    playTermsOfServiceHash: msg.getPlayTermsOfServiceHash_asB64(),
    descriptionGrdIdsList: jspb.Message.getRepeatedField(msg, 5),
    confirmationGrdId: jspb.Message.getField(msg, 3),
    status: jspb.Message.getField(msg, 4),
    consentFlow: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent;
  return proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayTermsOfServiceTextLength(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlayTermsOfServiceHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDescriptionGrdIds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmationGrdId(value);
      break;
    case 4:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow} */ (reader.readEnum());
      msg.setConsentFlow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDescriptionGrdIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow = {
  SETUP: 1,
  SETTING_CHANGE: 2
};

/**
 * optional int32 play_terms_of_service_text_length = 1;
 * @return {number}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getPlayTermsOfServiceTextLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.setPlayTermsOfServiceTextLength = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.clearPlayTermsOfServiceTextLength = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.hasPlayTermsOfServiceTextLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes play_terms_of_service_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getPlayTermsOfServiceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes play_terms_of_service_hash = 2;
 * This is a type-conversion wrapper around `getPlayTermsOfServiceHash()`
 * @return {string}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getPlayTermsOfServiceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlayTermsOfServiceHash()));
};


/**
 * optional bytes play_terms_of_service_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlayTermsOfServiceHash()`
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getPlayTermsOfServiceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlayTermsOfServiceHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.setPlayTermsOfServiceHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.clearPlayTermsOfServiceHash = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.hasPlayTermsOfServiceHash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int32 description_grd_ids = 5;
 * @return {!Array<number>}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getDescriptionGrdIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.setDescriptionGrdIdsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.addDescriptionGrdIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.clearDescriptionGrdIdsList = function() {
  this.setDescriptionGrdIdsList([]);
};


/**
 * optional int32 confirmation_grd_id = 3;
 * @return {number}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getConfirmationGrdId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.setConfirmationGrdId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.clearConfirmationGrdId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.hasConfirmationGrdId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ConsentStatus status = 4;
 * @return {!proto.sync_pb.UserConsentTypes.ConsentStatus}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getStatus = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.sync_pb.UserConsentTypes.ConsentStatus} value */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.clearStatus = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ConsentFlow consent_flow = 6;
 * @return {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.getConsentFlow = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/** @param {!proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow} value */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.setConsentFlow = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.clearConsentFlow = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.prototype.hasConsentFlow = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sync_pb.UserConsentTypes.SyncConsent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.SyncConsent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes.SyncConsent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.SyncConsent.toObject = function(includeInstance, msg) {
  var obj = {
    descriptionGrdIdsList: jspb.Message.getRepeatedField(msg, 1),
    confirmationGrdId: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes.SyncConsent}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes.SyncConsent;
  return proto.sync_pb.UserConsentTypes.SyncConsent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes.SyncConsent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes.SyncConsent}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDescriptionGrdIds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmationGrdId(value);
      break;
    case 3:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.SyncConsent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes.SyncConsent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.SyncConsent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescriptionGrdIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated int32 description_grd_ids = 1;
 * @return {!Array<number>}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.getDescriptionGrdIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.setDescriptionGrdIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.addDescriptionGrdIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.clearDescriptionGrdIdsList = function() {
  this.setDescriptionGrdIdsList([]);
};


/**
 * optional int32 confirmation_grd_id = 2;
 * @return {number}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.getConfirmationGrdId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.setConfirmationGrdId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.clearConfirmationGrdId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.hasConfirmationGrdId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConsentStatus status = 3;
 * @return {!proto.sync_pb.UserConsentTypes.ConsentStatus}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.getStatus = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.sync_pb.UserConsentTypes.ConsentStatus} value */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.SyncConsent.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.UnifiedConsent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes.UnifiedConsent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.toObject = function(includeInstance, msg) {
  var obj = {
    descriptionGrdIdsList: jspb.Message.getRepeatedField(msg, 1),
    confirmationGrdId: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes.UnifiedConsent}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes.UnifiedConsent;
  return proto.sync_pb.UserConsentTypes.UnifiedConsent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes.UnifiedConsent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes.UnifiedConsent}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDescriptionGrdIds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmationGrdId(value);
      break;
    case 3:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.UnifiedConsent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes.UnifiedConsent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescriptionGrdIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated int32 description_grd_ids = 1;
 * @return {!Array<number>}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.getDescriptionGrdIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.setDescriptionGrdIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.addDescriptionGrdIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.clearDescriptionGrdIdsList = function() {
  this.setDescriptionGrdIdsList([]);
};


/**
 * optional int32 confirmation_grd_id = 2;
 * @return {number}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.getConfirmationGrdId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.setConfirmationGrdId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.clearConfirmationGrdId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.hasConfirmationGrdId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConsentStatus status = 3;
 * @return {!proto.sync_pb.UserConsentTypes.ConsentStatus}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.getStatus = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.sync_pb.UserConsentTypes.ConsentStatus} value */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.UnifiedConsent.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.toObject = function(includeInstance, msg) {
  var obj = {
    uiAuditKey: msg.getUiAuditKey_asB64(),
    status: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent;
  return proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUiAuditKey(value);
      break;
    case 2:
      var value = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bytes ui_audit_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.getUiAuditKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ui_audit_key = 1;
 * This is a type-conversion wrapper around `getUiAuditKey()`
 * @return {string}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.getUiAuditKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUiAuditKey()));
};


/**
 * optional bytes ui_audit_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUiAuditKey()`
 * @return {!Uint8Array}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.getUiAuditKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUiAuditKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.setUiAuditKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.clearUiAuditKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.hasUiAuditKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConsentStatus status = 2;
 * @return {!proto.sync_pb.UserConsentTypes.ConsentStatus}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.getStatus = function() {
  return /** @type {!proto.sync_pb.UserConsentTypes.ConsentStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.sync_pb.UserConsentTypes.ConsentStatus} value */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.UserConsentTypes.AssistantActivityControlConsent.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.sync_pb);
