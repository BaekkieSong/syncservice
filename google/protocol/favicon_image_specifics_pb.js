/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sync_pb.FaviconData', null, global);
goog.exportSymbol('proto.sync_pb.FaviconImageSpecifics', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.FaviconData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.FaviconData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.FaviconData.displayName = 'proto.sync_pb.FaviconData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.FaviconImageSpecifics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.FaviconImageSpecifics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.FaviconImageSpecifics.displayName = 'proto.sync_pb.FaviconImageSpecifics';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.FaviconData.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.FaviconData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.FaviconData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.FaviconData.toObject = function(includeInstance, msg) {
  var obj = {
    favicon: msg.getFavicon_asB64(),
    width: jspb.Message.getField(msg, 2),
    height: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.FaviconData}
 */
proto.sync_pb.FaviconData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.FaviconData;
  return proto.sync_pb.FaviconData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.FaviconData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.FaviconData}
 */
proto.sync_pb.FaviconData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFavicon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.FaviconData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.FaviconData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.FaviconData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.FaviconData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes favicon = 1;
 * @return {!(string|Uint8Array)}
 */
proto.sync_pb.FaviconData.prototype.getFavicon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes favicon = 1;
 * This is a type-conversion wrapper around `getFavicon()`
 * @return {string}
 */
proto.sync_pb.FaviconData.prototype.getFavicon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFavicon()));
};


/**
 * optional bytes favicon = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFavicon()`
 * @return {!Uint8Array}
 */
proto.sync_pb.FaviconData.prototype.getFavicon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFavicon()));
};


/** @param {!(string|Uint8Array)} value */
proto.sync_pb.FaviconData.prototype.setFavicon = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.FaviconData.prototype.clearFavicon = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconData.prototype.hasFavicon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.sync_pb.FaviconData.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sync_pb.FaviconData.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.FaviconData.prototype.clearWidth = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconData.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.sync_pb.FaviconData.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sync_pb.FaviconData.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.FaviconData.prototype.clearHeight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconData.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.FaviconImageSpecifics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.FaviconImageSpecifics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.FaviconImageSpecifics.toObject = function(includeInstance, msg) {
  var obj = {
    faviconUrl: jspb.Message.getField(msg, 1),
    faviconWeb: (f = msg.getFaviconWeb()) && proto.sync_pb.FaviconData.toObject(includeInstance, f),
    faviconWeb32: (f = msg.getFaviconWeb32()) && proto.sync_pb.FaviconData.toObject(includeInstance, f),
    faviconTouch64: (f = msg.getFaviconTouch64()) && proto.sync_pb.FaviconData.toObject(includeInstance, f),
    faviconTouchPrecomposed64: (f = msg.getFaviconTouchPrecomposed64()) && proto.sync_pb.FaviconData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.FaviconImageSpecifics}
 */
proto.sync_pb.FaviconImageSpecifics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.FaviconImageSpecifics;
  return proto.sync_pb.FaviconImageSpecifics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.FaviconImageSpecifics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.FaviconImageSpecifics}
 */
proto.sync_pb.FaviconImageSpecifics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaviconUrl(value);
      break;
    case 2:
      var value = new proto.sync_pb.FaviconData;
      reader.readMessage(value,proto.sync_pb.FaviconData.deserializeBinaryFromReader);
      msg.setFaviconWeb(value);
      break;
    case 3:
      var value = new proto.sync_pb.FaviconData;
      reader.readMessage(value,proto.sync_pb.FaviconData.deserializeBinaryFromReader);
      msg.setFaviconWeb32(value);
      break;
    case 4:
      var value = new proto.sync_pb.FaviconData;
      reader.readMessage(value,proto.sync_pb.FaviconData.deserializeBinaryFromReader);
      msg.setFaviconTouch64(value);
      break;
    case 5:
      var value = new proto.sync_pb.FaviconData;
      reader.readMessage(value,proto.sync_pb.FaviconData.deserializeBinaryFromReader);
      msg.setFaviconTouchPrecomposed64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.FaviconImageSpecifics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.FaviconImageSpecifics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.FaviconImageSpecifics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaviconWeb();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sync_pb.FaviconData.serializeBinaryToWriter
    );
  }
  f = message.getFaviconWeb32();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sync_pb.FaviconData.serializeBinaryToWriter
    );
  }
  f = message.getFaviconTouch64();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sync_pb.FaviconData.serializeBinaryToWriter
    );
  }
  f = message.getFaviconTouchPrecomposed64();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sync_pb.FaviconData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string favicon_url = 1;
 * @return {string}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.getFaviconUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sync_pb.FaviconImageSpecifics.prototype.setFaviconUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.FaviconImageSpecifics.prototype.clearFaviconUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.hasFaviconUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FaviconData favicon_web = 2;
 * @return {?proto.sync_pb.FaviconData}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.getFaviconWeb = function() {
  return /** @type{?proto.sync_pb.FaviconData} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.FaviconData, 2));
};


/** @param {?proto.sync_pb.FaviconData|undefined} value */
proto.sync_pb.FaviconImageSpecifics.prototype.setFaviconWeb = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.FaviconImageSpecifics.prototype.clearFaviconWeb = function() {
  this.setFaviconWeb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.hasFaviconWeb = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FaviconData favicon_web_32 = 3;
 * @return {?proto.sync_pb.FaviconData}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.getFaviconWeb32 = function() {
  return /** @type{?proto.sync_pb.FaviconData} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.FaviconData, 3));
};


/** @param {?proto.sync_pb.FaviconData|undefined} value */
proto.sync_pb.FaviconImageSpecifics.prototype.setFaviconWeb32 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.FaviconImageSpecifics.prototype.clearFaviconWeb32 = function() {
  this.setFaviconWeb32(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.hasFaviconWeb32 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FaviconData favicon_touch_64 = 4;
 * @return {?proto.sync_pb.FaviconData}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.getFaviconTouch64 = function() {
  return /** @type{?proto.sync_pb.FaviconData} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.FaviconData, 4));
};


/** @param {?proto.sync_pb.FaviconData|undefined} value */
proto.sync_pb.FaviconImageSpecifics.prototype.setFaviconTouch64 = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.FaviconImageSpecifics.prototype.clearFaviconTouch64 = function() {
  this.setFaviconTouch64(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.hasFaviconTouch64 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FaviconData favicon_touch_precomposed_64 = 5;
 * @return {?proto.sync_pb.FaviconData}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.getFaviconTouchPrecomposed64 = function() {
  return /** @type{?proto.sync_pb.FaviconData} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.FaviconData, 5));
};


/** @param {?proto.sync_pb.FaviconData|undefined} value */
proto.sync_pb.FaviconImageSpecifics.prototype.setFaviconTouchPrecomposed64 = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.FaviconImageSpecifics.prototype.clearFaviconTouchPrecomposed64 = function() {
  this.setFaviconTouchPrecomposed64(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.FaviconImageSpecifics.prototype.hasFaviconTouchPrecomposed64 = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.sync_pb);
