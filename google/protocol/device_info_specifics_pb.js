/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var sync_enums_pb = require('./sync_enums_pb.js');
goog.object.extend(proto, sync_enums_pb);
goog.exportSymbol('proto.sync_pb.DeviceInfoSpecifics', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.DeviceInfoSpecifics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.DeviceInfoSpecifics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.DeviceInfoSpecifics.displayName = 'proto.sync_pb.DeviceInfoSpecifics';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.DeviceInfoSpecifics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.DeviceInfoSpecifics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.DeviceInfoSpecifics.toObject = function(includeInstance, msg) {
  var obj = {
    cacheGuid: jspb.Message.getField(msg, 1),
    clientName: jspb.Message.getField(msg, 2),
    deviceType: jspb.Message.getField(msg, 3),
    syncUserAgent: jspb.Message.getField(msg, 4),
    chromeVersion: jspb.Message.getField(msg, 5),
    deprecatedBackupTimestamp: jspb.Message.getField(msg, 6),
    signinScopedDeviceId: jspb.Message.getField(msg, 7),
    lastUpdatedTimestamp: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.DeviceInfoSpecifics}
 */
proto.sync_pb.DeviceInfoSpecifics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.DeviceInfoSpecifics;
  return proto.sync_pb.DeviceInfoSpecifics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.DeviceInfoSpecifics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.DeviceInfoSpecifics}
 */
proto.sync_pb.DeviceInfoSpecifics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacheGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientName(value);
      break;
    case 3:
      var value = /** @type {!proto.sync_pb.SyncEnums.DeviceType} */ (reader.readEnum());
      msg.setDeviceType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSyncUserAgent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChromeVersion(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeprecatedBackupTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigninScopedDeviceId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdatedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.DeviceInfoSpecifics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.DeviceInfoSpecifics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.DeviceInfoSpecifics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.sync_pb.SyncEnums.DeviceType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional string cache_guid = 1;
 * @return {string}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getCacheGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setCacheGuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearCacheGuid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasCacheGuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_name = 2;
 * @return {string}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getClientName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setClientName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearClientName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasClientName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SyncEnums.DeviceType device_type = 3;
 * @return {!proto.sync_pb.SyncEnums.DeviceType}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getDeviceType = function() {
  return /** @type {!proto.sync_pb.SyncEnums.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.sync_pb.SyncEnums.DeviceType} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setDeviceType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearDeviceType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasDeviceType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sync_user_agent = 4;
 * @return {string}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getSyncUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setSyncUserAgent = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearSyncUserAgent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasSyncUserAgent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string chrome_version = 5;
 * @return {string}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getChromeVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setChromeVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearChromeVersion = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasChromeVersion = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 deprecated_backup_timestamp = 6;
 * @return {number}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getDeprecatedBackupTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setDeprecatedBackupTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearDeprecatedBackupTimestamp = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasDeprecatedBackupTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string signin_scoped_device_id = 7;
 * @return {string}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getSigninScopedDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setSigninScopedDeviceId = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearSigninScopedDeviceId = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasSigninScopedDeviceId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 last_updated_timestamp = 8;
 * @return {number}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.getLastUpdatedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.sync_pb.DeviceInfoSpecifics.prototype.setLastUpdatedTimestamp = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.clearLastUpdatedTimestamp = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.DeviceInfoSpecifics.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.sync_pb);
