/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var encryption_pb = require('./encryption_pb.js');
goog.object.extend(proto, encryption_pb);
goog.exportSymbol('proto.sync_pb.PasswordSpecifics', null, global);
goog.exportSymbol('proto.sync_pb.PasswordSpecificsData', null, global);
goog.exportSymbol('proto.sync_pb.PasswordSpecificsMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.PasswordSpecificsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.PasswordSpecificsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.PasswordSpecificsData.displayName = 'proto.sync_pb.PasswordSpecificsData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.PasswordSpecificsMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.PasswordSpecificsMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.PasswordSpecificsMetadata.displayName = 'proto.sync_pb.PasswordSpecificsMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sync_pb.PasswordSpecifics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sync_pb.PasswordSpecifics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sync_pb.PasswordSpecifics.displayName = 'proto.sync_pb.PasswordSpecifics';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.PasswordSpecificsData.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.PasswordSpecificsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.PasswordSpecificsData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PasswordSpecificsData.toObject = function(includeInstance, msg) {
  var obj = {
    scheme: jspb.Message.getField(msg, 1),
    signonRealm: jspb.Message.getField(msg, 2),
    origin: jspb.Message.getField(msg, 3),
    action: jspb.Message.getField(msg, 4),
    usernameElement: jspb.Message.getField(msg, 5),
    usernameValue: jspb.Message.getField(msg, 6),
    passwordElement: jspb.Message.getField(msg, 7),
    passwordValue: jspb.Message.getField(msg, 8),
    sslValid: jspb.Message.getField(msg, 9),
    preferred: jspb.Message.getField(msg, 10),
    dateCreated: jspb.Message.getField(msg, 11),
    blacklisted: jspb.Message.getField(msg, 12),
    type: jspb.Message.getField(msg, 13),
    timesUsed: jspb.Message.getField(msg, 14),
    displayName: jspb.Message.getField(msg, 15),
    avatarUrl: jspb.Message.getField(msg, 16),
    federationUrl: jspb.Message.getField(msg, 17)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.PasswordSpecificsData}
 */
proto.sync_pb.PasswordSpecificsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.PasswordSpecificsData;
  return proto.sync_pb.PasswordSpecificsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.PasswordSpecificsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.PasswordSpecificsData}
 */
proto.sync_pb.PasswordSpecificsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScheme(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignonRealm(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsernameElement(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsernameValue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswordElement(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswordValue(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSslValid(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreferred(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDateCreated(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlacklisted(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimesUsed(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setFederationUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.PasswordSpecificsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.PasswordSpecificsData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.PasswordSpecificsData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PasswordSpecificsData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional int32 scheme = 1;
 * @return {number}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getScheme = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sync_pb.PasswordSpecificsData.prototype.setScheme = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearScheme = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasScheme = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string signon_realm = 2;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getSignonRealm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setSignonRealm = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearSignonRealm = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasSignonRealm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string origin = 3;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setOrigin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearOrigin = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string action = 4;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setAction = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearAction = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasAction = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string username_element = 5;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getUsernameElement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setUsernameElement = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearUsernameElement = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasUsernameElement = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string username_value = 6;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getUsernameValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setUsernameValue = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearUsernameValue = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasUsernameValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string password_element = 7;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getPasswordElement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setPasswordElement = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearPasswordElement = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasPasswordElement = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string password_value = 8;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getPasswordValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setPasswordValue = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearPasswordValue = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasPasswordValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool ssl_valid = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getSslValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.sync_pb.PasswordSpecificsData.prototype.setSslValid = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearSslValid = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasSslValid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool preferred = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getPreferred = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.sync_pb.PasswordSpecificsData.prototype.setPreferred = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearPreferred = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasPreferred = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 date_created = 11;
 * @return {number}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getDateCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.sync_pb.PasswordSpecificsData.prototype.setDateCreated = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearDateCreated = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasDateCreated = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool blacklisted = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getBlacklisted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.sync_pb.PasswordSpecificsData.prototype.setBlacklisted = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearBlacklisted = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasBlacklisted = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 type = 13;
 * @return {number}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.sync_pb.PasswordSpecificsData.prototype.setType = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearType = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasType = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 times_used = 14;
 * @return {number}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getTimesUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.sync_pb.PasswordSpecificsData.prototype.setTimesUsed = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearTimesUsed = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasTimesUsed = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string display_name = 15;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setDisplayName = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearDisplayName = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string avatar_url = 16;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string federation_url = 17;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsData.prototype.getFederationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsData.prototype.setFederationUrl = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsData.prototype.clearFederationUrl = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsData.prototype.hasFederationUrl = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.PasswordSpecificsMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.PasswordSpecificsMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.PasswordSpecificsMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PasswordSpecificsMetadata.toObject = function(includeInstance, msg) {
  var obj = {
    url: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.PasswordSpecificsMetadata}
 */
proto.sync_pb.PasswordSpecificsMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.PasswordSpecificsMetadata;
  return proto.sync_pb.PasswordSpecificsMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.PasswordSpecificsMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.PasswordSpecificsMetadata}
 */
proto.sync_pb.PasswordSpecificsMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.PasswordSpecificsMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.PasswordSpecificsMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.PasswordSpecificsMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PasswordSpecificsMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.sync_pb.PasswordSpecificsMetadata.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sync_pb.PasswordSpecificsMetadata.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.sync_pb.PasswordSpecificsMetadata.prototype.clearUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecificsMetadata.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sync_pb.PasswordSpecifics.prototype.toObject = function(opt_includeInstance) {
  return proto.sync_pb.PasswordSpecifics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sync_pb.PasswordSpecifics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PasswordSpecifics.toObject = function(includeInstance, msg) {
  var obj = {
    encrypted: (f = msg.getEncrypted()) && encryption_pb.EncryptedData.toObject(includeInstance, f),
    clientOnlyEncryptedData: (f = msg.getClientOnlyEncryptedData()) && proto.sync_pb.PasswordSpecificsData.toObject(includeInstance, f),
    unencryptedMetadata: (f = msg.getUnencryptedMetadata()) && proto.sync_pb.PasswordSpecificsMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sync_pb.PasswordSpecifics}
 */
proto.sync_pb.PasswordSpecifics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sync_pb.PasswordSpecifics;
  return proto.sync_pb.PasswordSpecifics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sync_pb.PasswordSpecifics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sync_pb.PasswordSpecifics}
 */
proto.sync_pb.PasswordSpecifics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new encryption_pb.EncryptedData;
      reader.readMessage(value,encryption_pb.EncryptedData.deserializeBinaryFromReader);
      msg.setEncrypted(value);
      break;
    case 2:
      var value = new proto.sync_pb.PasswordSpecificsData;
      reader.readMessage(value,proto.sync_pb.PasswordSpecificsData.deserializeBinaryFromReader);
      msg.setClientOnlyEncryptedData(value);
      break;
    case 3:
      var value = new proto.sync_pb.PasswordSpecificsMetadata;
      reader.readMessage(value,proto.sync_pb.PasswordSpecificsMetadata.deserializeBinaryFromReader);
      msg.setUnencryptedMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sync_pb.PasswordSpecifics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sync_pb.PasswordSpecifics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sync_pb.PasswordSpecifics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sync_pb.PasswordSpecifics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncrypted();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      encryption_pb.EncryptedData.serializeBinaryToWriter
    );
  }
  f = message.getClientOnlyEncryptedData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sync_pb.PasswordSpecificsData.serializeBinaryToWriter
    );
  }
  f = message.getUnencryptedMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sync_pb.PasswordSpecificsMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional EncryptedData encrypted = 1;
 * @return {?proto.sync_pb.EncryptedData}
 */
proto.sync_pb.PasswordSpecifics.prototype.getEncrypted = function() {
  return /** @type{?proto.sync_pb.EncryptedData} */ (
    jspb.Message.getWrapperField(this, encryption_pb.EncryptedData, 1));
};


/** @param {?proto.sync_pb.EncryptedData|undefined} value */
proto.sync_pb.PasswordSpecifics.prototype.setEncrypted = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.PasswordSpecifics.prototype.clearEncrypted = function() {
  this.setEncrypted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecifics.prototype.hasEncrypted = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PasswordSpecificsData client_only_encrypted_data = 2;
 * @return {?proto.sync_pb.PasswordSpecificsData}
 */
proto.sync_pb.PasswordSpecifics.prototype.getClientOnlyEncryptedData = function() {
  return /** @type{?proto.sync_pb.PasswordSpecificsData} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.PasswordSpecificsData, 2));
};


/** @param {?proto.sync_pb.PasswordSpecificsData|undefined} value */
proto.sync_pb.PasswordSpecifics.prototype.setClientOnlyEncryptedData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.PasswordSpecifics.prototype.clearClientOnlyEncryptedData = function() {
  this.setClientOnlyEncryptedData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecifics.prototype.hasClientOnlyEncryptedData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PasswordSpecificsMetadata unencrypted_metadata = 3;
 * @return {?proto.sync_pb.PasswordSpecificsMetadata}
 */
proto.sync_pb.PasswordSpecifics.prototype.getUnencryptedMetadata = function() {
  return /** @type{?proto.sync_pb.PasswordSpecificsMetadata} */ (
    jspb.Message.getWrapperField(this, proto.sync_pb.PasswordSpecificsMetadata, 3));
};


/** @param {?proto.sync_pb.PasswordSpecificsMetadata|undefined} value */
proto.sync_pb.PasswordSpecifics.prototype.setUnencryptedMetadata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sync_pb.PasswordSpecifics.prototype.clearUnencryptedMetadata = function() {
  this.setUnencryptedMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sync_pb.PasswordSpecifics.prototype.hasUnencryptedMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.sync_pb);
